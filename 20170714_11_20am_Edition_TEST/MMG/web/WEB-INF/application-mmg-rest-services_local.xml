<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">


   <!-- Initializing the HTTP Client Parameters -->
   <beans:bean id="httpClientParams" class="org.apache.commons.httpclient.params.HttpClientParams">
        <beans:property name="authenticationPreemptive" value="false"/> 
        <beans:property name="connectionManagerClass"
                  value="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
   </beans:bean>

   <!-- Specifying the Username and password credentials  WWW-->
   <beans:bean id="credentials" class="org.apache.commons.httpclient.UsernamePasswordCredentials">
        <beans:constructor-arg value="${http.proxyUser}" index="0"/>
        <beans:constructor-arg value="${http.proxyPassword}" index="1"/>
        
    </beans:bean>

     <!-- Identifying the Host Configuration -->
     <beans:bean id="hostConfiguration" class="org.apache.commons.httpclient.HostConfiguration"/>


      <!-- Configuring the Proxy Server -->
     <beans:bean id="proxyHost" class="org.apache.commons.httpclient.ProxyHost">
        <beans:constructor-arg value="${http.proxyHost}" type="java.lang.String" index="0"/>
        <beans:constructor-arg value="${http.proxyPort}" type="int" index="1"/>
    </beans:bean>

     <!-- Method Invoking Factory Bean Which will Invoke the SetProxyHost Function on the hostConfiguration Object -->
     <beans:bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
            <beans:property name="targetObject">
                <beans:ref local="hostConfiguration"/>
            </beans:property>
            <beans:property name="targetMethod">
                <beans:value>setProxyHost</beans:value>
            </beans:property>
            <beans:property name="arguments">
                <beans:ref local="proxyHost"/>
            </beans:property>
    </beans:bean>  

    <!-- Initializing the HttpState for feeding into HttpClient -->
    <beans:bean id="httpState" class="org.apache.commons.httpclient.HttpState"/>
    
    <!-- MethodInvokingFactoryBean for invoking the method setCredentials on the httpState object -->
    <beans:bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
            <beans:property name="targetObject">
                <beans:ref local="httpState"/>
            </beans:property>
            <beans:property name="targetMethod">
                <beans:value>setCredentials</beans:value>
            </beans:property>
            <beans:property name="arguments">
                <beans:list>
                     <beans:ref local="authScope" />
                     <beans:ref local="credentials"/>
                </beans:list>
            </beans:property>
    </beans:bean>

    <!-- This Bean initializing teh HTTPClient AuthScope -->
    <beans:bean id="authScope" class="org.apache.commons.httpclient.auth.AuthScope">
        <beans:constructor-arg type="java.lang.String" index="0" value="${http.proxyHost}"/>
        <beans:constructor-arg type="int" index="1" value="${http.proxyPort}"/>

     </beans:bean>

    <!-- This Bean initializing the HttpClient responsible for invoking the HTTP WEb Services -->
    <beans:bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
        <beans:constructor-arg ref="httpClientParams"/> 
        <beans:property name="state" ref="httpState"/>
        <beans:property name="hostConfiguration" ref="hostConfiguration" />
    </beans:bean>

   
    <!-- Initializing the HTTP Client Factory -->
    <beans:bean id="httpClientFactory" class="org.springframework.http.client.CommonsClientHttpRequestFactory">
        <beans:constructor-arg ref="httpClient"/>
    </beans:bean>

    <!-- Initializing the REST Template -->
    <beans:bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <beans:constructor-arg ref="httpClientFactory"/>

    <!--   The Below code needs to be enabled later on -->
        <beans:property name="messageConverters">
            <beans:list>
                <beans:bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                    <beans:property name="marshaller" ref="jaxbMarshaller"/>
                    <beans:property name="unmarshaller" ref="jaxbMarshaller"/>
                </beans:bean>
                <beans:bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>  

    <!-- Initializingthe JAX Marshaller that is to be used  -->
    <beans:bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <beans:property name="classesToBeBound">
            <beans:list>

                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerSearchResultVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerInfoVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerInfoAddressVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerInfoAddressVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerInfoAccoladeVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestUserTaskResponseVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestUserTaskSuccessResponseVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestUserVehicleMaintenanceResponseVO</beans:value>
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestUserVehicleInformationVO</beans:value>
                <!-- The Below line has been commented bcoz in Dealer Search and this the XML Root ELEMENT is Same, so resttemplate
                would not be able to classify the response, between both of them 
                <beans:value>com.mazdausa.mmg.service.rest.response.vo.RestDealerCouponsResponseVO</beans:value>  -->




            </beans:list>
        </beans:property>
          <beans:property name="marshallerProperties">
            <beans:map>
                <beans:entry key="jaxb.formatted.output" value-ref="true"/>
            </beans:map>
        </beans:property>
    </beans:bean>

    <beans:bean id="true" class="java.lang.Boolean">
        <beans:constructor-arg value="True"/>
    </beans:bean>

</beans:beans>






